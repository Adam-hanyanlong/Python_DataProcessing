import random

import pandas as pd
import numpy as np

# 数据处理三阶段——>数据准备——>数据转换——>数据聚合

# 数据整合————合并（有很多参数——需要用到时再进行学习，本笔记记录了简单的合并函数）
frame1 = pd.DataFrame({"id": ["adam", "bob1", "win", "simon"], "old": [18, 20, 22, 24]})
print(frame1)
frame2 = pd.DataFrame(
    {"id": ["bob2", "bob1", "adam", "jack"], "school": ["aaa", "ccc", "eee", "kkk"], "old": [20, 18, 24, 22]})
print(frame2)
merge1 = pd.merge(frame1, frame2, on="old")
print(merge1)

# 数据整合————拼接(数组拼接用concatenate()函数--按轴拼接Series和DataFrame对象用concat()函数)
print("_________拼接_________")
array1 = np.arange(9).reshape(3, 3)
print(array1)
array2 = np.arange(9).reshape(3, 3) + 9
print(array2)
print("_________拼接后的数组(array3)_______")
array3 = np.concatenate([array1, array2], axis=0)  # 纵向拼接
print(array3)
array4 = np.concatenate([array1, array2], axis=1)  # 横向拼接
print(array4)
print("_________按轴拼接Series对象_________")
ser1 = pd.Series(["adam", "bob", "simon"], index=[1, 2, 3])
print(ser1)
ser2 = pd.Series(["win", "jack", "clone"], index=[4, 5, 6])
print(ser2)
ser3_1 = pd.concat([ser1, ser2], axis=0)
print(ser3_1)
print("_______加入key值可清晰的识别被拼接的部分_______")
ser3_2 = pd.concat([ser1, ser2], axis=0, keys=[1, 2])
print(ser3_2)
print("_________axis=1为DateFrame对象_________")
ser3_3 = pd.concat([ser1, ser2], axis=1)
print(ser3_3)
print("_______________________________")
ser3_4 = pd.concat([ser1, ser2], axis=1, keys=[1, 2])  # 加入键值可以修改DataFrame对象各列的名称,同时清晰的识别出被拼接的部分
print(ser3_4)
print("_________按轴拼接DataFrame对象_________")
frame3 = pd.DataFrame(np.random.rand(9).reshape(3, 3), index=[1, 2, 3], columns=["A", "B", "C"])
frame4 = pd.DataFrame(np.random.rand(9).reshape(3, 3), index=[4, 5, 6], columns=["A", "B", "C"])
frame5 = pd.concat([frame3, frame4], axis=0, keys=[1, 2])
print(frame5)
frame6 = pd.concat([frame3, frame4], axis=1, keys=[1, 2])
print(frame6)

# 数据整合————组合（重合数据）
print("__________________________")
ser4 = pd.Series(np.random.rand(5), index=[1, 2, 3, 4, 5])
print(ser4)
ser5 = pd.Series(np.random.rand(4), index=[2, 4, 5, 6])
print(ser5)
# 出现序号重复时，以第一个Series对象为准，不重复时，互补
print("_________ser4为标准_________")
ser6 = ser4.combine_first(ser5)
print(ser6)
print("_________ser5为标准_________")
ser7 = ser5.combine_first(ser4)
print(ser7)

# 轴向旋转
# 1.按等级索引旋转
print("________________________")
frame7 = pd.DataFrame(np.arange(9).reshape(3, 3), index=["adam", "bob", "simon"], columns=["A", "B", "C"])
print(frame7)
print("++++++++++++++++++++++")
print(frame7.stack())  # 入栈
print(frame7.stack().unstack())  # 出栈
print(frame7.stack().unstack(0))  # 矩阵转置
# 2.“长”格式向“宽”格式转换
print("++++++++++++++++++++++++")
longframe = pd.DataFrame(
    {"color": ["white", "white", "white", "red", "red", "red", "black", "black", "black"],
     "item": ["ball", "pen", "mug", "ball", "pen", "mug", "ball", "pen", "mug"],
     "value": np.random.rand(9)})
print(longframe)
print("++++++转换为宽格式，可读性更好+++++++")
wideframe = longframe.pivot(index=["color"], columns=["item"], values="value")  # 特别注意要在函数内部定义值
print(wideframe)

# 删除操作
# 删除列 用del  del ____["列名"]
# 删除行 用drop()函数  ____.drop("索引名称")



# 数据转换之找到重复元素！！用duplicated()函数
dframe = pd.DataFrame({"color": ["white", "white", "red", "red", "white"], "value": [2, 1, 3, 3, 2]})
print(dframe)
print("++++++++++过滤后显示布尔值++++++++++++")
dframe2 = dframe.duplicated()
print(dframe2)
# 过滤操作  显示重复的Series对象
print("+++++++++显示重复的Series对象+++++++++++")
print(dframe[dframe.duplicated()])
print("++++++++++++++++++++++++++++++++++++")
# 返回删除重复行后的DataFrame对象  用drop_duplicates()函数
print(dframe.drop_duplicates())
print("————————————改变轴索引名称（映射的方法）—————————————")
print(frame7)
reindex = {"adam": "ADAM", "bob": "BOB", "simon": "SIMON"}
recolumn = {"A": "性别", "B": "年龄", "C": "成绩"}
print(frame7.rename(index=reindex, columns=recolumn))  # rename()函数
print("———————————面元划分——————————————")
# 离散化和面元划分
results = [random.randint(1, 100) for i in range(10)]
# 利用for循环制造10个随机数，值得注意的是randint是完全随机，有可能重复。random.sample()生成不重复的随机数。
bins = [0, 25, 50, 75, 100]  # 定义数组 储存面元划分的数值
cat = pd.cut(results, bins)
results_counts = pd.value_counts(cat)
print(results)
print(results_counts)
print("—————————————排序———————————————")
print(frame7)
new_order = [2, 1, 0]
print(frame7.take(new_order, axis=0))  # 用axis来控制对行或列的排序操作
print("————————————数据处理之文本切分split()——————————")
text = "Adam is a Master Degree Candidate,he was pass the postgraduate exam on December 24,2023"
new_text1 = [text.split(",")]
new_text2, new_text3, new_text4 = text.split(",")
print(new_text1)
print("这是切割后的第一个文本:{}".format(new_text2))
print("这是切割后的第二个文本:{}".format(new_text3))
print("这是切割后的第三个文本:{}".format(new_text4))
print("——————————数据处理之文本拼接join()————————————")
strings = ["我", "爱", "编", "程"]
print("++".join(strings))
print(strings.index("我"))  # 查找字符串是否存在及其位置
print("——————————GroupBy————————————")
# 先分组，把相同sex的分到一组，在进行函数的计算
frame = pd.DataFrame({"name": ["adam", "bob", "simon", "bob"]
                         , "sex": ["boy", "boy", "girl", "boy"]
                         , "old": ["22", "23", "22", "20"]
                         , "score": [522, 500, 537, 666]
                         , "score2": [654, 647, 622, 589]})
group = frame["score"].groupby(frame["sex"])
print(group.sum())
# 等级分组
group2 = frame["score"].groupby([frame["old"], frame["sex"]])
print(group2.sum())
# 多列数据分组进行计算，得分数据为score和score2,以性别sex为标签进行计算，含义为分别计算男女两次成绩的总和
group3 = frame[["score", "score2"]].groupby(frame["sex"])
print(group3.sum())


# 高级数据聚合
print("————————————高级数据聚合————————————")
# 例子如下
print(frame)
frame8 = frame[["name", "score", "score2"]]
sums = frame8.groupby("name").sum().add_prefix("go_")
print(sums)
# merge()函数会进行打乱分组
# merge()函数把聚合操作的计算结果添加到DataFrame对象的每一行。
frame8_merge = pd.merge(frame8, sums, on="name")
print(frame8_merge)
# transform()函数也能实现和merge()函数相同的计算效果。
# 但它不会打乱分组，按照所给定对象的关键字的顺序进行聚合。
sums2 = frame.groupby("name").transform(np.sum).add_prefix("go_")
print(sums2)
